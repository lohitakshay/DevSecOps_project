pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'looooohit/devsecops-project'
        SONARQUBE_URL = 'http://localhost:9000'
        Devsec_sonar = credentials('Devsec_sonar')
        EMAIL_RECIPIENTS = 'lohitakshay2004@gmail.com'
        DOCKER_REGISTRY = 'https://registry.hub.docker.com'
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'Github_token', url: 'https://github.com/lohitakshay/DevSecOps_project.git'
            }
        }

        stage('Build') {
            steps {
                script {
                    dockerImage = docker.build(DOCKER_IMAGE, '-f devsec.dockerfile .')
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn clean verify sonar:sonar -Dsonar.login=${Devsec_sonar}'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry(DOCKER_REGISTRY, DOCKER_CREDENTIALS_ID) {
                        dockerImage.push('latest')
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Ensure kubectl is configured properly
                    sh 'kubectl config view'

                    // Apply Kubernetes configurations as root
                    sh 'sudo kubectl apply -f /home/devsec/devsecops/devsec_kub.yaml'
                }
            }
        }
    }

    post {
        success {
            emailext (
                to: "${EMAIL_RECIPIENTS}",
                subject: "Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "The build was successful. Check the build details at ${env.BUILD_URL}."
            )
        }
        failure {
            emailext (
                to: "${EMAIL_RECIPIENTS}",
                subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "The build failed. Check the build details at ${env.BUILD_URL}."
            )
        }
        unstable {
            emailext (
                to: "${EMAIL_RECIPIENTS}",
                subject: "Build Unstable: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "The build is unstable. Check the build details at ${env.BUILD_URL}."
            )
        }
    }
}
